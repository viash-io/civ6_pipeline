functionality:
  name: "plot_map"
  namespace: "civ6_save_renderer"
  version: "main_build"
  authors: []
  arguments:
  - type: "file"
    name: "--yaml"
    alternatives:
    - "-y"
    description: "A YAML file containing civ6 game settings information."
    example: "header.yaml"
    must_exist: true
    required: true
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--tsv"
    alternatives:
    - "-t"
    description: "A TSV file containing civ6 map information."
    example: "map.tsv"
    must_exist: true
    required: true
    direction: "Input"
    multiple: false
    multiple_sep: ":"
  - type: "file"
    name: "--output"
    alternatives:
    - "-o"
    description: "Path to store the output PDF file at."
    example: "output.pdf"
    must_exist: false
    required: true
    direction: "Output"
    multiple: false
    multiple_sep: ":"
  resources:
  - type: "bash_script"
    text: |
      #!/usr/bin/env bash
      
      #############################
      #    plot_map main_build    #
      #############################
      
      # This wrapper script is auto-generated by viash 0.5.10.1 and is thus a
      # derivative work thereof. This software comes with ABSOLUTELY NO WARRANTY from
      # Data Intuitive.  The component may contain files which fall under a different
      # license. The authors of this component should specify the license in the
      # header of such files, or include a separate license file detailing the
      # licenses of all included files.
      
      set -e
      
      if [ -z "$VIASH_TEMP" ]; then
        VIASH_TEMP=/tmp
      fi
      
      # define helper functions
      # ViashQuote: put quotes around non flag values
      # $1     : unquoted string
      # return : possibly quoted string
      # examples:
      #   ViashQuote --foo      # returns --foo
      #   ViashQuote bar        # returns 'bar'
      #   Viashquote --foo=bar  # returns --foo='bar'
      function ViashQuote {
        if [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+=.+$ ]]; then
          echo "$1" | sed "s#=\(.*\)#='\1'#"
        elif [[ "$1" =~ ^-+[a-zA-Z0-9_\-]+$ ]]; then
          echo "$1"
        else
          echo "'$1'"
        fi
      }
      # ViashRemoveFlags: Remove leading flag
      # $1     : string with a possible leading flag
      # return : string without possible leading flag
      # examples:
      #   ViashRemoveFlags --foo=bar  # returns bar
      function ViashRemoveFlags {
        echo "$1" | sed 's/^--*[a-zA-Z0-9_\-]*=//'
      }
      # ViashSourceDir: return the path of a bash file, following symlinks
      # usage   : ViashSourceDir ${BASH_SOURCE[0]}
      # $1      : Should always be set to ${BASH_SOURCE[0]}
      # returns : The absolute path of the bash file
      function ViashSourceDir {
        SOURCE="$1"
        while [ -h "$SOURCE" ]; do
          DIR="$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )"
          SOURCE="$(readlink "$SOURCE")"
          [[ $SOURCE != /* ]] && SOURCE="$DIR/$SOURCE"
        done
        cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd
      }
      # see https://en.wikipedia.org/wiki/Syslog#Severity_level
      VIASH_LOGCODE_EMERGENCY=0
      VIASH_LOGCODE_ALERT=1
      VIASH_LOGCODE_CRITICAL=2
      VIASH_LOGCODE_ERROR=3
      VIASH_LOGCODE_WARNING=4
      VIASH_LOGCODE_NOTICE=5
      VIASH_LOGCODE_INFO=6
      VIASH_LOGCODE_DEBUG=7
      VIASH_VERBOSITY=$VIASH_LOGCODE_NOTICE
      
      # ViashLog: Log events depending on the verbosity level
      # usage: ViashLog 1 alert Oh no something went wrong!
      # $1: required verbosity level
      # $2: display tag
      # $3+: messages to display
      # stdout: Your input, prepended by '[$2] '.
      function ViashLog {
        local required_level="$1"
        local display_tag="$2"
        shift 2
        if [ $VIASH_VERBOSITY -ge $required_level ]; then
          echo "[$display_tag]" "$@"
        fi
      }
      
      # ViashEmergency: log events when the system is unstable
      # usage: ViashEmergency Oh no something went wrong.
      # stdout: Your input, prepended by '[emergency] '.
      function ViashEmergency {
        ViashLog $VIASH_LOGCODE_EMERGENCY emergency $@
      }
      
      # ViashAlert: log events when actions must be taken immediately (e.g. corrupted system database)
      # usage: ViashAlert Oh no something went wrong.
      # stdout: Your input, prepended by '[alert] '.
      function ViashAlert {
        ViashLog $VIASH_LOGCODE_ALERT alert $@
      }
      
      # ViashCritical: log events when a critical condition occurs
      # usage: ViashCritical Oh no something went wrong.
      # stdout: Your input, prepended by '[critical] '.
      function ViashCritical {
        ViashLog $VIASH_LOGCODE_CRITICAL critical $@
      }
      
      # ViashError: log events when an error condition occurs
      # usage: ViashError Oh no something went wrong.
      # stdout: Your input, prepended by '[error] '.
      function ViashError {
        ViashLog $VIASH_LOGCODE_ERROR error $@
      }
      
      # ViashWarning: log potentially abnormal events
      # usage: ViashWarning Something may have gone wrong.
      # stdout: Your input, prepended by '[warning] '.
      function ViashWarning {
        ViashLog $VIASH_LOGCODE_WARNING warning $@
      }
      
      # ViashNotice: log significant but normal events
      # usage: ViashNotice This just happened.
      # stdout: Your input, prepended by '[notice] '.
      function ViashNotice {
        ViashLog $VIASH_LOGCODE_NOTICE notice $@
      }
      
      # ViashInfo: log normal events
      # usage: ViashInfo This just happened.
      # stdout: Your input, prepended by '[info] '.
      function ViashInfo {
        ViashLog $VIASH_LOGCODE_INFO info $@
      }
      
      # ViashDebug: log all events, for debugging purposes
      # usage: ViashDebug This just happened.
      # stdout: Your input, prepended by '[debug] '.
      function ViashDebug {
        ViashLog $VIASH_LOGCODE_DEBUG debug $@
      }
      
      # find source folder of this component
      VIASH_RESOURCES_DIR=`ViashSourceDir ${BASH_SOURCE[0]}`
      
      # define meta fields
      VIASH_META_FUNCTIONALITY_NAME="plot_map"
      
      
      # ViashHelp: Display helpful explanation about this executable
      function ViashHelp {
        echo "plot_map main_build"
        echo "Use the settings yaml and the map tsv to generate a plot (as PDF)."
        echo
        echo "Options:"
      
        echo "   -y, --yaml"
        echo "        type: file, required parameter, file must exist"
        echo "        example: header.yaml"
        echo "        A YAML file containing civ6 game settings information."
        echo ""
      
      
        echo "   -t, --tsv"
        echo "        type: file, required parameter, file must exist"
        echo "        example: map.tsv"
        echo "        A TSV file containing civ6 map information."
        echo ""
      
      
        echo "   -o, --output"
        echo "        type: file, required parameter, output"
        echo "        example: output.pdf"
        echo "        Path to store the output PDF file at."
        echo ""
      
      }
      
      # initialise array
      VIASH_POSITIONAL_ARGS=''
      VIASH_MODE='run'
      
      while [[ $# -gt 0 ]]; do
          case "$1" in
              -h|--help)
                  ViashHelp
                  exit
                  ;;
              ---v|---verbose)
                  let "VIASH_VERBOSITY=VIASH_VERBOSITY+1"
                  shift 1
                  ;;
              ---verbosity)
                  VIASH_VERBOSITY="$2"
                  shift 2
                  ;;
              ---verbosity=*)
                  VIASH_VERBOSITY="$(ViashRemoveFlags "$1")"
                  shift 1
                  ;;
              --version)
                  echo "plot_map main_build"
                  exit
                  ;;
              --yaml)
                  VIASH_PAR_YAML="$2"
                  shift 2
                  ;;
              --yaml=*)
                  VIASH_PAR_YAML=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              -y)
                  VIASH_PAR_YAML="$2"
                  shift 2
                  ;;
              --tsv)
                  VIASH_PAR_TSV="$2"
                  shift 2
                  ;;
              --tsv=*)
                  VIASH_PAR_TSV=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              -t)
                  VIASH_PAR_TSV="$2"
                  shift 2
                  ;;
              --output)
                  VIASH_PAR_OUTPUT="$2"
                  shift 2
                  ;;
              --output=*)
                  VIASH_PAR_OUTPUT=$(ViashRemoveFlags "$1")
                  shift 1
                  ;;
              -o)
                  VIASH_PAR_OUTPUT="$2"
                  shift 2
                  ;;
              *)  # positional arg or unknown option
                  # since the positional args will be eval'd, can we always quote, instead of using ViashQuote
                  VIASH_POSITIONAL_ARGS="$VIASH_POSITIONAL_ARGS '$1'"
                  shift # past argument
                  ;;
          esac
      done
      
      # parse positional parameters
      eval set -- $VIASH_POSITIONAL_ARGS
      
      
      
      
      # check whether required parameters exist
      if [ -z "$VIASH_PAR_YAML" ]; then
        ViashError '--yaml' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_TSV" ]; then
        ViashError '--tsv' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      if [ -z "$VIASH_PAR_OUTPUT" ]; then
        ViashError '--output' is a required argument. Use "--help" to get more information on the parameters.
        exit 1
      fi
      
      
      # check whether required files exist
      if [ ! -z "$VIASH_PAR_YAML" ] && [ ! -e "$VIASH_PAR_YAML" ]; then
        ViashError "File '$VIASH_PAR_YAML' does not exist."
        exit 1
      fi
      if [ ! -z "$VIASH_PAR_TSV" ] && [ ! -e "$VIASH_PAR_TSV" ]; then
        ViashError "File '$VIASH_PAR_TSV' does not exist."
        exit 1
      fi
      
      cat << VIASHEOF | bash
      set -e
      tempscript=\$(mktemp "$VIASH_TEMP/viash-run-plot_map-XXXXXX")
      function clean_up {
        rm "\$tempscript"
      }
      function interrupt {
        echo -e "\nCTRL-C Pressed..."
        exit 1
      }
      trap clean_up EXIT
      trap interrupt INT SIGINT
      cat > "\$tempscript" << 'VIASHMAIN'
      ## VIASH START
      # The following code has been auto-generated by Viash.
      # get parameters from cli
      par <- list(
        "yaml" = $( if [ ! -z ${VIASH_PAR_YAML+x} ]; then echo "'$VIASH_PAR_YAML'"; else echo NULL; fi ),
        "tsv" = $( if [ ! -z ${VIASH_PAR_TSV+x} ]; then echo "'$VIASH_PAR_TSV'"; else echo NULL; fi ),
        "output" = $( if [ ! -z ${VIASH_PAR_OUTPUT+x} ]; then echo "'$VIASH_PAR_OUTPUT'"; else echo NULL; fi )
      )
      
      # get meta parameters
      meta <- list(
        functionality_name = "$VIASH_META_FUNCTIONALITY_NAME",
        resources_dir = "$VIASH_RESOURCES_DIR"
      )
      
      # get resources dir
      resources_dir = "$VIASH_RESOURCES_DIR"
      
      ## VIASH END
      library(tidyverse)
      library(cowplot)
      
      source(paste0(resources_dir, "/helper.R"))
      
      # par <- list(
      #   yaml = "/home/rcannood/workspace/di/viash_workshop_1/data.yaml",
      #   tsv = "/home/rcannood/workspace/di/viash_workshop_1/data.tsv"
      # )
      
      # read data
      game_data <- read_header(par\$yaml)
      map_data <- read_map(par\$tsv)
      
      # make visualisation
      g <- make_map_plot(game_data, map_data)
      
      # save map to file
      gleg <- cowplot::get_legend(g)
      gnoleg <- g + theme(legend.position = "none")
      gout <- cowplot::plot_grid(gnoleg, gleg, rel_widths = c(8, 1))
      ggsave(par\$output, gout, width = 24, height = 13)
      VIASHMAIN
      Rscript "\$tempscript" &
      wait "\$!"
      
      VIASHEOF
      

    dest: "plot_map"
    is_executable: true
  - type: "file"
    path: "helper.R"
  description: "Use the settings yaml and the map tsv to generate a plot (as PDF)."
  tests: []
  info: {}
  dummy_arguments: []
  set_wd_to_resources_dir: false
  add_resources_to_path: false
platform:
  type: "native"
  id: "native"
platforms: []
info:
  config: "src/civ6_save_renderer/plot_map/config.vsh.yaml"
  platform: "native"
  output: "target/native/civ6_save_renderer/plot_map"
  executable: "target/native/civ6_save_renderer/plot_map/plot_map"
  viash_version: "0.5.10.1"
  git_commit: "c3f87f2eb5766011d3c562d69385745a554ce119"
  git_remote: "https://github.com/viash-io/civ6_pipeline"
